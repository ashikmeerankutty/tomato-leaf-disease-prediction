{"version":3,"sources":["components/preview.jsx","index.js"],"names":["Preview","useState","match","setMatch","file","setFile","loading","setLoading","setPredictions","onDrop","useCallback","files","getResults","a","formData","FormData","append","fetch","method","body","response","json","data","class","probs","console","log","useDropzone","getRootProps","getInputProps","isDragActive","Pane","elevation","height","width","display","alignItems","justifyContent","flexDirection","Heading","size","padding","Card","border","src","URL","createObjectURL","alt","backgroundColor","paddingLeft","paddingRight","paddingTop","Text","Icon","icon","color","align","Button","marginTop","disabled","isLoading","onClick","name","base","map","d","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe319ba.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Pane, Card, Text, Icon, Heading, Button } from \"evergreen-ui\";\n\nconst Preview = () => {\n  const [match, setMatch] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [predictions, setPredictions] = useState(null);\n\n  const diseases = [\n    {\n      name: \"bacterial_spot\",\n      base: \"#FAE2E2\",\n      match: \"#EC4C47\",\n    },\n    {\n      name: \"late_blight\",\n      base: \"#FAE3CD\",\n      match: \"#D9822B\",\n    },\n    {\n      name: \"leaf_mold\",\n      base: \"#D2EEF3\",\n      match: \"#14B5D0\",\n    },\n    {\n      name: \"mosaic_virus\",\n      base: \"#EAE7F8\",\n      match: \"#735DD0\",\n    },\n    {\n      name: \"septoria_leaf_spot\",\n      base: \"#E4E7EB\",\n      match: \"#425A70\",\n    },\n    {\n      name: \"spider_mites\",\n      base: \"#DDEBF7\",\n      match: \"#1070CA\",\n    },\n    {\n      name: \"target_spot\",\n      base: \"#F7F9FD\",\n      match: \"#084B8A\",\n    },\n    {\n      name: \"tomato_yellow_leaf\",\n      base: \"#FEF6F6\",\n      match: \"#BF0E08\",\n    },\n    {\n      name: \"healthy\",\n      base: \"#D4EEE2\",\n      match: \"#47B881\",\n    },\n  ];\n\n  const onDrop = useCallback((files) => {\n    setFile(files[0]);\n  }, []);\n\n  const getResults = async () => {\n    setLoading(true)\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await fetch(\"/predict\", {\n        method: \"POST\",\n        body: formData,\n      });\n      const data = await response.json();\n      setMatch(data.class);\n      setPredictions(data.probs);\n      setFile(null)\n      setLoading(false)\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  return (\n    <Pane\n      elevation={2}\n      height=\"100vh\"\n      width=\"100vw\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      flexDirection=\"column\"\n    >\n      <Heading size={800} padding={30}>\n        Tomato Leaf Disease Prediction\n      </Heading>\n      <Card\n        border=\"default\"\n        width={1000}\n        height={600}\n        padding={50}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        flexDirection=\"row\"\n      >\n        <Pane\n          display=\"flex\"\n          flexDirection=\"column\"\n          width=\"100%\"\n          padding={50}\n        >\n          { !file ?  <Card\n            backgroundColor=\"#D2E3FC\"\n            height={180}\n            paddingLeft={20}\n            paddingRight={20}\n            paddingTop={60}\n            {...getRootProps()}\n          >\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <Text>Drop the files here ...</Text>\n            ) : (\n              <Pane\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                flexDirection=\"column\"\n              >\n                <Icon icon=\"folder-new\" color=\"#1967D2\" />\n                <Text paddingTop={10} align=\"center\" color=\"#1967D2\">\n                  Choose image from your file or drag & drop here\n                </Text>\n              </Pane>\n            )}\n          </Card> : <Pane display=\"flex\" justifyContent=\"center\" alignItems=\"center\"><img src={URL.createObjectURL(file)} alt=\"plant\" /></Pane>}\n          <Pane display=\"flex\" justifyContent=\"center\">\n            <Button\n              align=\"center\"\n              marginTop={20}\n              disabled={!file}\n              isLoading={loading}\n              onClick={() => getResults()}\n            >\n              {loading ? \"Uploading\" : \"Upload\"}\n            </Button>\n          </Pane>\n        </Pane>\n        <Pane paddingTop={50}>\n          <Heading size={500}>Output</Heading>\n          {diseases.map((d) => (\n            <Pane\n              paddingTop={20}\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n            >\n              <Text align=\"left\" color=\"#1967D2\">\n                {d.name}\n              </Text>\n              <Pane\n                width={250}\n                height={25}\n                background={match === d.name ? d.match : d.base}\n              ></Pane>\n            </Pane>\n          ))}\n        </Pane>\n      </Card>\n    </Pane>\n  );\n};\n\nexport default Preview;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Preview from './components/preview';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Preview />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}